#!/usr/bin/env ruby
# frozen_string_literal: true

require 'gli'
require 'cve_monitor'
require 'cpe23'
require 'open-uri'
require 'zlib'
require 'json'

class App
  extend GLI::App
  include CveMonitor

  program_desc 'Monitor CVEs for a list of CPEs'

  version CveMonitor::VERSION

  subcommand_option_handling :normal
  arguments :strict

  desc 'Add CPE(s) to monitor'
  arg_name '[CPE...]'
  command :add do |c|
    c.action do |_global_options, _options, args|
      args = [CpeBuilder.build] if args.empty? || args.all?(&:empty?)

      # TODO: de-duplicate entries.
      # Need to implement a way of comparing CPEs and determining which one is
      # more generic. The most generic CPE should be retained.
      @cpe_list.add! args
      @cpe_list.save!
    end
  end

  desc 'Remove monitored CPE(s)'
  arg_name '[CPE...]'
  command :remove do |c|
    c.action do |_global_options, _options, args|
      args = [CpeBuilder.build] if args.empty? || args.all?(&:empty?)

      # TODO: Should entries be removed if the CPE matches, or only if they are
      # identical?
      @cpe_list.remove! args
      @cpe_list.save!
    end
  end

  desc 'Displays monitored CPEs'
  command :list do |c|
    c.action do |_global_options, _options, _args|
      puts @cpe_list.to_s
    end
  end

  desc 'Check for CVEs against monitored CPEs'
  arg_name 'year...'
  command :check do |c|
    c.desc 'Checks against recent CVE list'
    c.command :recent do |c1|
      c1.action do |_global_options, _options, _args|
        CveFeed.new('recent').check(@cpe_list)
      end
    end

    c.desc 'Check against modified CVE list'
    c.command :modified do |c1|
      c1.action do |_global_options, _options, _args|
        CveFeed.new('modified').check(@cpe_list)
      end
    end

    c.default_desc 'Check against CVEs for the given year(s)'
    c.action do |_global_options, _options, args|
      raise 'Must specify at least one year' unless args&.any?

      args.each do |year|
        CveFeed.new(year).check(@cpe_list)
      end
    end
  end

  pre do |_global, _command, _options, _args|
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    @cpe_list = CpeList.new('cpes.txt')
    true
  end

  post do |global, command, options, args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |_exception|
    # Error logic here
    # return false to skip default error handling
    true
  end
end

exit App.run(ARGV)
